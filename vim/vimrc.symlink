set nocompatible
filetype off
set background=dark
set ttimeoutlen=50
" set noshowmode

" Map F5 for Gundo
nnoremap <F5> :GundoToggle<CR>

" size of a hard tabstop
set tabstop=2
" size of an "indent"
set shiftwidth=2
" always uses spaces instead of tab characters
set expandtab

let macvim_skip_colorscheme = 1
let $GIT_SSL_NO_VERIFY = 'true'

let g:lightline = {
  \ 'colorscheme': 'jellybeans',
  \ 'mode_map': { 'c': 'NORMAL' },
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ], ['fugitive', 'filename'  ] ]
  \ },
  \ 'component_function': {
  \   'modified': 'MyModified',
  \   'readonly': 'MyReadonly',
  \   'fugitive': 'MyFugitive',
  \   'filename': 'MyFilename',
  \   'fileformat': 'MyFileformat',
  \   'filetype': 'MyFiletype',
  \   'fileencoding': 'MyFileencoding',
  \   'mode': 'MyMode',
  \ },
  \ }

function! MyModified()
	return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
	return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'тнд' : ''
endfunction

function! MyFilename()
	return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
		\ (&ft == 'vimfiler' ? vimfiler#get_status_string() : 
		\  &ft == 'unite' ? unite#get_status_string() : 
		\  &ft == 'vimshell' ? vimshell#get_status_string() :
		\ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
		\ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
	if &ft !~? exists("*fugitive#head")
			let _ = fugitive#head()
			return strlen(_) ? 'тна '._ : ''
	endif

	return ''
endfunction

function! MyFileformat()
	return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
	return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
	return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
	return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

set laststatus=2

let g:tmuxline_preset = {
	\'a'    : '#S',
	\'win'  : ['#I', '#W'],
	\'cwin' : ['#I', '#W', '#F'],
	\'y'    : ['%R', '%a', '%Y'],
	\'z'    : '#H'}

" visual up and down movement through wrapped lines/paragraphs
noremap j gj
noremap k gk

set number
set showcmd
set title
set nobackup
set noswapfile

" Vim can highlight whitespaces for you in a convenient way:
set list
set listchars=tab:>_,trail:.,extends:#,nbsp:.

set rtp+=~/.vim/bundle/Vundle.vim 
call vundle#begin() 

Plugin 'gmarik/Vundle.vim' 
Plugin 'bling/vim-airline' 
Plugin 'Gundo'
Plugin 'vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'Shougo/vimfiler.vim'
Plugin 'Shougo/vimshell.vim'
Plugin 'Shougo/unite.vim'
Bundle 'edkolev/tmuxline.vim'
Bundle 'itchyny/lightline.vim'
Bundle 'togglecursor'
Plugin 'git@github.com:Valloric/YouCompleteMe.git'

filetype plugin on
filetype plugin indent on     " required! 
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_enable_signs=1
let g:syntastic_auto_jump=1
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_check_on_open=1
let g:syntastic_aggregate_errores=1

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

  
let g:airline_detect_paste=1 
let g:airline#extensions#tabline#enabled=1 
let g:airline#extensions#tabline#left_sep=' ' 
let g:airline#extensions#tabline#left_alt_sep='|' 
let g:airline_powerline_fonts=1 
let g:Powerline_symbols='fancy' 
let g:airline#extensions#tmuxline#enabled=1

call vundle#end()            " required 

syntax on
filetype plugin indent on    " required 

" Auto load NERDTree when VIM opens
autocmd vimenter * NERDTree

" Load podfiles and fastfiles as Ruby
autocmd BufRead,BufNewFile  Podfile set filetype=ruby
autocmd BufRead,BufNewFile  Fastfile set filetype=ruby
